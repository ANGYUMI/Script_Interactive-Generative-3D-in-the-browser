/*

WebGL 에는 기본적으로 광원, 모델링, 마테리얼 등이 들어가지만 
이들을 보여주기 위한 장치인 카메라와 렌더링 역시 중요한 요소들이다. 

// 카메라의 종류
Three.js 뿐만이 아니라 대부분 제작 툴에서 대표적으로 다루는 카메라는 총 2가지다. 

1) 원근감이 있는 '원근 카메라' (Perspective Camera)
2) 원근감이 없는 '직교 카메라' (Orthographic Camera)

원근감을 가진 카메라로 보는 것은 사람의 눈으로 보는 것과 비슷하다고 보면 된다. 
대표적으로 가까운 거리에 있는 물체는 크게, 언 거리에 있는 물체는 작게 보여준다. 
같은 크기의 물체라도 가까운 거리에 있다면 넓게, 먼 거리에 있다면 좁게 보여준다. 
반대로 원근감을 가지지 않은 카메라는 거리에 상관없이 모든 물건을 똑같은 크기, 똑같은 너비로 보여준다. 

우선 원근 카메라는 대부분 1인칭, 혹은 3인칭 시점의 3D 게임에 들어간다. 
위에서 언급했듯이 원근 카메라로 비춰지는 화면이 사람의 눈으로 보는 것과 흡사하기 때문이다. 

직교 카메라의 경우는 체력바, 점수 등의 UI를 보여줄 때, 혹은 게임 상에서 원근감을 보여줄 필요가 없을 때 사용된다. 
(2D 횡 스크롤 게임의 경우 배경 연출 등을 위해 원근감을 쓰는 경우도 있다. )
고정 시점이 위에서 45도 내려다 보는 식인 쿼터뷰 게임에서 자주 볼 수 있는데, 
고정 시점이 위에서 45도 내려다보는 식인 쿼터뷰 게임에서 자주 볼 수 있다. 
물건이 얼마나 멀리 있든, 공평한? 크기로 볼 수 있다. 

두 카메라는 WebGL 에서는 둘 중 하나만 포함한다고 그것으로 끝은 아니다. 

각 카메라에 따른 설정이 있는데, 
Three.js 에서는 물체를 보여줄 수 있는 최소/최대의 시야값이 있고, 
또 원근감을 얼마나 줄 수 있는지 (FOV라 불리는 것) 설정해줄 수 있다. 

지금까지 원근 카메라와 직교 카메라에 대한 이론을 알아보았다. 
이제부터는 원근 카메라와 직교 카메라 별 설정 즉 코드를 알아보겠다. 

// Perspective projection(P) vs. Orthographic projection(O)

두 카메라의 차이는 바로 원근감이다. 
원근 카메라의 경우, 원뿔 모양으로 가까운 곳은 좁고, 먼 곳은 넓게 본다. 
하지만 직교 카메라는 상하좌우로 사각형의 범위 안에서 그 모습 그대로를 보여준다. 
즉 가까운 곳도 그대로, 먼 곳도 그대로 보여주는 것이다. 

코드 상에서도 이 방식에서만 차이가 있으며, 나머지 특징은 사실상 비슷하다. 


1) 원근 카메라 코드
------------------------------------------------------------------------------------------------------------------------
var camera = new THREE.PerspectiveCamera(FOV/시야각, Aspect/가로세로 비율, Near/가까운 거리, Far/먼 거리);
------------------------------------------------------------------------------------------------------------------------
예: var camera = new THREE.PerspectiveCamera(50, 1, 0.1, 2000);
------------------------------------------------------------------------------------------------------------------------

원근 카메라에 들어가는 고유 코드는 Fov와 Aspect이다. 
우선 Fov(시야각)는 1인칭 FPS 게임을 자주 해봤다면 들어봤을 것이지만,
공간이나 물체를 보는 '시야의 각도'다. 
시야의 각도가 좁다면 그만큼 볼 수 있는 화면의 범위도 좁아지고, 반대로 시야의 각도가 넓다면 그만큼 화면의 범위도 넓어지게 된다. 
하지만 시야의 각도 값이 너무 높아지면 화면에 왜곡이 생기게 된다. 
aspect 는 가로와 세로의 비율이다.
설정할 수 있는 값이 가로, 세로로 구분되지 않고 하나로 통합되어 있는데, 
이는 '세로/가로 (가로 ÷ 세로)' 식으로 계산을 시키면 된다. 
만약 보여주려는 화면의 해상도가 16:9(1280×720, 1920÷1080 등)이라면 16/9 정도로 입력하면 된다. 
하지만 WebGL은 특성 상 인터넷 창을 쓰기 때문에 사용자에 따른 화면 비율이 항상 같지만은 않다. 
때문에 WebGL 화면의 크기를 고정시키는 것이 아닌 한, 범용성을 위해서는 화면의 크기에 맞추는 것이 좋다. 

------------------------------------------------------------------------------------------------------------------------
// aspect 값을 화면의 가로/세로로 할 경우: 

window.innerWidth/window.innerHeight
------------------------------------------------------------------------------------------------------------------------

마지막으로 Near와 Far 값은 카메라로 보여줄 수 있는 '시야의 거리'를 말한다. 
아무리 물체가 시야 범위 안에 있어도 Near 값보다 가깝거나 Far 값보다 멀다면, 
그 물체는 시야 밖에 있는 것으로 처리되어 화면에 보이지 않게 된다. 

즉, Near보다 멀고 Far보다 가까운, 그 두 사이에 있어야만 물체가 보이게 된다. 


2) 직교 카메라 코드

------------------------------------------------------------------------------------------------------------------------
var camera = new THREE.OrthographicCamera(면의 왼쪽, 면의 오른쪽, 면의 위쪽, 면의 아래쪽, 가까운 거리, 먼 거리);
------------------------------------------------------------------------------------------------------------------------

직교 카메라는 원근 카메라와는 달리 원뿔이 아닌, 사각형 형태로 보기 때문에, '상/하/좌/우'로 보여줄 영역을 지정해줘야 한다. 
그 외, '전/후'영역은 Near와 Far 값이 대신 해준다.
역할 자체는 원근 카메라에서 쓰는 것과 같은데, 
직교 카메라에서는 직관적으로 사각형의 '앞 영역'과 '뒷 영역'이라는 역할로 이름을 붙일 수 있다. 

*/
