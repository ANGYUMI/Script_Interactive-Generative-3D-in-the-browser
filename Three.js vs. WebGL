/*
웹에서 작동하는 3D 콘텐츠(단순히 웹사이트 배경에 3D 애니메이션을 넣는다거나, 거창하게는 웹에서 작동하는 게임을 만드는 것)를 
제작하기 위해 검색을 하다보면 WebGL 이라는 언어를 만나게 된다. 
기존 OpenGL 을 웹사이트 구축에 맞게 간략화시켜 놓은 것인데, 
사실 WebGL 코드는 아주 기본 중의 기본에 충실한 언어라서 
그것만으로는 웹사이트 전용 3D 게임을 완성하기는 힘들 수 있다. 

Three.js 는 WebGL 를 기반으로 하는 대표적인 3d 라이브러리다. 
구글링을 하면서 볼 수 있는 예제와 튜토리얼은 설명이 꽤나 잘 되어있으며, 실제로 그것을 통해 구현한 게임 등을 보았을 때 완성도 역시 훌륭했다. 
일종의 최신 기술이라 할 수 있는 VR 모드로 전환하는 코드도 있어서 이 정도면 누구나 도전을 해볼 만하다고 할 수 있겠다. 

// Three.js 공식 사이트: https://threejs.org/

Three.js 는 웹 페이지에서 3D 컨텐츠를 쉽게 얻을 수 있도록하는 3D 라이브러리이다.
WebGL 과 혼동되기도 하지만, Three.js 는 WebGL 만을 사용하여 3D를 그리는 것 아니다. 
WebGL은 점, 선 그리고 삼각형만 그리는 매우 낮은 수준의 시스템이다. 
WebGL을 사용하여 유용한 작업을 수행하려면 일반적으로 약간의 코드가 필요하며 여기에 three.js가 들어간다. 
장면, 조명, 그림자, 재료, 텍스처(질감), 3D 수학 등. 
WebGL만 이용해 개발하는 경, 개발자가 모두 직접 작성해야하는 것들을 대신 처리해주는 라이브러리인 것이다. 

대부분의 프로그래밍 언어를 배울 때 사람들이 가장 먼저하는 일은 화면에 "Hello World!"를 찍는 것이다. 
3D의 경우 가장 일반적인 첫 번째 작업 중 하나는 3D 큐브를 만드는 것이다. 
"Hello Cube"로 시작하고자 한다. 

"Hello Cube"를 시작하기 전에, three.js의 앱 구조에 대한 이해를 제공하고자 한다. 
three.js 앱을 만들기 위해서는 굉장히 많은 객체들을 만들어 서로 연결해야 한다. 

// 다이어그램

1) Renderer
다이어그램 상에서 제일 상위에는 [ Renderer ]가 있다. 이것은 아마도 Three.js의 주요 객체일 것이다. 
당신이 [ Scene ]과 [ Camera ]를 [ Renderer ]에게 각각 하나씩 전달하면
[ Renderer ]는 [ camera ] 내부요소인 frustum 을 이용하여 3D 장면의 비율을 2D 이미지로서 (변환하여) 캔버스에 그린다. 

2) Scenegraph 
트리구조같이 생긴 scenegraph(역자 주: 하늘색 박스로 표현된 장면의 범위)는 
[ Scene ] 객체 하나와 여러 개의 [ Mesh } 객체, [ light ] 객체, [ Group ], [ Object3D ] 그리고 [ Camera ]  객체를 포함하고 있다. 
[ Scene ]  객체 하나는 scene 그래프의 루트를 정의하며, 배경색상 및 안개(효과) 프로퍼티를 포함한다. 
이 개체들은 부모 / 자식 객체들의 계층적 관계(Tree)를 정의하고, 또한 어디에 객체들이 나타날 것인지와 어떻게 놓여질 지를 재현한다. 
자식 객체들은 부모들과 연관하여 위치와 방향이 결정된다. 
예를 들어, 자동차 핸들은 자동차라는 부모(개념)의 자식이고, 자동차 자체를 움직이고 방향을 틀 때 핸들도 자동으로 같이 움직인다. 
다이어그램을 보면 [ Camera ] 가 scenegraph 안 밖으로 거쳐져 있다. 
이것은 Three.js 에서 [ Camera ]가 다른 객체들처럼 꼭 scenegraph 의 안에 있어야 작동하는 것은 아니라는 것을 나타낸다. 
[ Camera ]도 어떤 것의 자식이 되어 그에 맞게 움직이고 방향지어질 수 있다는 것은 똑같다. 
여러 개의 [ Camera ] 객체를 scenegraph 에 둔 예제를 확인하고자 한다면 다음 링크를 참조하면 된다. 

https://threejsfundamentals.org/threejs/lessons/threejs-scenegraph.html

3) Geometry (기하학)
[ Geometry ] 객체는 구, 큐브, 평면, 개, 고양이, 인간, 나무, 건물 등과 같은 지오메트리 조각의 vertex(꼭짓점) 데이터를 나타낸다. 
Three.js 는 다양한 지오메트리 기본 형식을 제공한다. 
파일에서 Geometry Primitives (주: 기하학 도형)을 로드할 뿐만 아니라 사용자가 만든 형상을 만들 수도 있다. 

4) Material & Texture (재료 및 질감)
[ Material ] 객체는 [ Geometry ]의 표면 속성을 나타내며, 색상 및 광택과 같은 것을 포함한다. 
또한 [ Material ]은 하나 이상의 [ Texture ](질감) 객체를 참조할 수 있는데, 이미지 파일을 불러와 적용할 수도 있다. 
[ Texture ] 객체는 일반적으로 이미지 파일에서 로드된 이미지가 될 수도 있고, 
캔버스에서 직접 생성될 수고 있으며, 다른 장면에서 렌더링 된 것일 수도 있다. 

5) Light
[ Light ] 객체는 여러 종류의 조명을 나타낸다. (주: 직접광, 간접광 등 )

*/
